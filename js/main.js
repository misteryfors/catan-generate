const CONFIG = {
    hexSize: 50,
    layouts: {
        small: [
            [0,1,1,1,0],
            [1,1,1,1,0],
            [1,1,1,1,1],
            [1,1,1,1,0],
            [0,1,1,1,0]
        ],
        medium: [
            [0,1,1,1,0,1,1,1,0],
            [1,1,1,1,1,1,1,1,0],
            [1,1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1,0],
            [0,1,1,1,0,1,1,1,0]
        ],
        large: [
            [0,0,1,1,1,1,1,0,0],
            [0,1,1,1,1,1,1,1,0],
            [1,1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1,1],
            [0,1,1,1,1,1,1,1,0],
            [0,0,1,1,1,1,1,0,0]
        ],
        huge: [
            [0,0,1,1,1,1,1,1,0,0],
            [0,1,1,1,1,1,1,1,1,0],
            [1,1,1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1,1,1],
            [0,1,1,1,1,1,1,1,1,0],
            [0,0,1,1,1,1,1,1,0,0]
        ]
    },
    resourceTypes: [
        { id: 'fields', name: '–ü—à–µ–Ω–∏—Ü–∞', symbol: 'üåæ', color: '#f5e6a1', default: 4 },
        { id: 'forest', name: '–õ–µ—Å', symbol: 'üå≤', color: '#9ccc65', default: 4 },
        { id: 'pasture', name: '–ü–∞—Å—Ç–±–∏—â–µ', symbol: 'üêë', color: '#c8e6c9', default: 4 },
        { id: 'hills', name: '–•–æ–ª–º—ã', symbol: 'üß±', color: '#ef9a9a', default: 3 },
        { id: 'mountains', name: '–ì–æ—Ä—ã', symbol: '‚õ∞Ô∏è', color: '#b0bec5', default: 3 },
        { id: 'desert', name: '–ü—É—Å—Ç—ã–Ω—è', symbol: 'üèúÔ∏è', color: '#ffe0b2', default: 1 }
    ]
};

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function createEmptyHexMap() {
    const board = document.getElementById('game-board');
    board.innerHTML = '';

    const selectedSize = document.querySelector('input[name="board-size"]:checked').value;
    const layout = CONFIG.layouts[selectedSize];

    const hexWidth = CONFIG.hexSize * Math.sqrt(3);
    const rowHeight = CONFIG.hexSize * 1.5;

    layout.forEach((row, rowIndex) => {
        const y = rowIndex * rowHeight;

        row.forEach((cell, colIndex) => {
            if (cell === 1) {
                const xOffset = (rowIndex % 2) * hexWidth / 2;
                const x = colIndex * hexWidth + xOffset;

                const hex = document.createElement('div');
                hex.className = 'hexagon empty';
                hex.style.setProperty('--hex-size', `${CONFIG.hexSize}px`);
                hex.style.left = `${x}px`;
                hex.style.top = `${y}px`;
                hex.dataset.row = rowIndex;
                hex.dataset.col = colIndex;
                hex.title = `–ì–µ–∫—Å–∞–≥–æ–Ω (${colIndex}, ${rowIndex})`;

                board.appendChild(hex);
            }
        });
    });

    centerBoard(layout);
}

function centerBoard(layout) {
    const board = document.getElementById('game-board');
    const container = document.querySelector('.game-board-container');

    if (!layout) {
        const selectedSize = document.querySelector('input[name="board-size"]:checked').value;
        layout = CONFIG.layouts[selectedSize];
    }

    const cols = layout[0].length;
    const rows = layout.length;
    const hexWidth = CONFIG.hexSize * Math.sqrt(3);
    const rowHeight = CONFIG.hexSize * 1.5;

    const boardWidth = cols * hexWidth + CONFIG.hexSize;
    const boardHeight = rows * rowHeight;

    board.style.width = `${boardWidth}px`;
    board.style.height = `${boardHeight}px`;

    container.scrollLeft = (board.scrollWidth - container.clientWidth) / 2;
    container.scrollTop = (board.scrollHeight - container.clientHeight) / 2;
}

function getNeighbors(row, col, layout) {
    const neighbors = [];
    const isOddRow = row % 2 !== 0;

    const neighborOffsets = [
        [-1, 0], [1, 0],
        [0, -1], [0, 1],
        [isOddRow ? 1 : -1, isOddRow ? -1 : 1],
        [isOddRow ? 1 : -1, isOddRow ? 1 : -1]
    ];

    neighborOffsets.forEach(([dr, dc]) => {
        const newRow = row + dr;
        const newCol = col + dc;

        if (newRow >= 0 && newRow < layout.length &&
            newCol >= 0 && newCol < layout[newRow].length &&
            layout[newRow][newCol] === 1) {
            neighbors.push({ row: newRow, col: newCol });
        }
    });

    return neighbors;
}

function getTotalCells() {
    const selectedSize = document.querySelector('input[name="board-size"]:checked').value;
    const layout = CONFIG.layouts[selectedSize];
    return layout.flat().filter(cell => cell === 1).length;
}

function randomizeResourceCounts() {
    const totalCells = getTotalCells();
    const desertCount = Math.min(2, Math.max(1, Math.floor(totalCells / 12)));
    const remainingCells = totalCells - desertCount;

    CONFIG.resourceTypes.forEach(resource => {
        if (resource.id === 'desert') {
            document.getElementById(`${resource.id}-count`).value = desertCount;
        } else {
            const max = Math.floor(remainingCells * 0.3);
            const min = Math.max(2, Math.floor(remainingCells * 0.1));
            const count = Math.floor(Math.random() * (max - min + 1)) + min;
            document.getElementById(`${resource.id}-count`).value = count;
        }
    });

    adjustResourceCounts();
}

function adjustResourceCounts() {
    const totalCells = getTotalCells();
    let totalAssigned = 0;
    const resources = [];

    CONFIG.resourceTypes.forEach(resource => {
        const count = parseInt(document.getElementById(`${resource.id}-count`).value) || 0;
        totalAssigned += count;
        resources.push({ id: resource.id, count, element: document.getElementById(`${resource.id}-count`) });
    });

    while (totalAssigned > totalCells) {
        resources.sort((a, b) => b.count - a.count);
        for (let res of resources) {
            if (res.count > 1) {
                res.count--;
                res.element.value = res.count;
                totalAssigned--;
                break;
            }
        }
    }

    while (totalAssigned < totalCells) {
        resources.sort((a, b) => a.count - b.count);
        for (let res of resources) {
            if (res.id !== 'desert' || (res.id === 'desert' && res.count < 2)) {
                res.count++;
                res.element.value = res.count;
                totalAssigned++;
                break;
            }
        }
    }
}

function createResourcePool() {
    const pool = [];

    CONFIG.resourceTypes.forEach(resource => {
        const count = parseInt(document.getElementById(`${resource.id}-count`).value) || 0;
        for (let i = 0; i < count; i++) {
            pool.push({
                type: resource.id,
                name: resource.name,
                symbol: resource.symbol
            });
        }
    });

    return shuffleArray(pool);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª —É —Å–æ—Å–µ–¥–µ–π
function getForbiddenNumbers(hex, hexGrid, layout) {
    const forbidden = new Set();
    const row = parseInt(hex.dataset.row);
    const col = parseInt(hex.dataset.col);
    const neighbors = getNeighbors(row, col, layout);

    neighbors.forEach(neighbor => {
        const neighborHex = hexGrid[neighbor.row]?.[neighbor.col];
        if (neighborHex && neighborHex.dataset.number) {
            forbidden.add(parseInt(neighborHex.dataset.number));
        }
    });

    return forbidden;
}

function distributeNumbers() {
    const board = document.getElementById('game-board');
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—É—Å—Ç—ã–µ –≥–µ–∫—Å—ã, –∫—Ä–æ–º–µ –ø—É—Å—Ç—ã–Ω–∏
    const hexagons = Array.from(board.querySelectorAll('.hexagon:not(.desert):not(.empty)'));
    const selectedSize = document.querySelector('input[name="board-size"]:checked').value;
    const layout = CONFIG.layouts[selectedSize];

    if (hexagons.length === 0) return;

    // –°–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø—É–ª —á–∏—Å–µ–ª [2,3,4,5,6,8,9,10,11,12,2,3,...]
    const baseNumbers = [2,3,4,5,6,8,9,10,11,12];
    const numberPool = [];
    const neededNumbers = hexagons.length;

    for (let i = 0; i < neededNumbers; i++) {
        numberPool.push(baseNumbers[i % baseNumbers.length]);
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    const shuffledPool = shuffleWithOrder(numberPool);

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const hexGrid = {};
    hexagons.forEach(hex => {
        const row = parseInt(hex.dataset.row);
        const col = parseInt(hex.dataset.col);
        if (!hexGrid[row]) hexGrid[row] = {};
        hexGrid[row][col] = hex;
    });

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∏—Å–ª–∞ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    const availableHexes = [...hexagons];
    const numbersToPlace = [...shuffledPool];

    while (numbersToPlace.length > 0 && availableHexes.length > 0) {
        const number = numbersToPlace.shift();
        let placed = false;
        let attempts = 0;
        const maxAttempts = availableHexes.length * 2;

        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —á–∏—Å–ª–æ
        while (!placed && attempts < maxAttempts && availableHexes.length > 0) {
            attempts++;
            const randomIndex = Math.floor(Math.random() * availableHexes.length);
            const hex = availableHexes[randomIndex];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–µ–π
            const forbiddenNumbers = getForbiddenNumbers(hex, hexGrid, layout);
            if (!forbiddenNumbers.has(number)) {
                // –†–∞–∑–º–µ—â–∞–µ–º —á–∏—Å–ª–æ
                const numberElement = document.createElement('div');
                numberElement.className = 'hex-number';
                numberElement.textContent = number;
                hex.appendChild(numberElement);
                hex.dataset.number = number;

                // –£–¥–∞–ª—è–µ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                availableHexes.splice(randomIndex, 1);
                placed = true;
            }
        }

        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        if (!placed && availableHexes.length > 0) {
            const hex = availableHexes.shift();
            const numberElement = document.createElement('div');
            numberElement.className = 'hex-number';
            numberElement.textContent = number;
            hex.appendChild(numberElement);
            hex.dataset.number = number;
        }
    }
}

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ —á–∏—Å–µ–ª
function shuffleWithOrder(array) {
    const chunks = [];
    const chunkSize = 10; // –†–∞–∑–º–µ—Ä –Ω–∞—à–µ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —á–∏—Å–µ–ª

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for (let i = 0; i < array.length; i += chunkSize) {
        chunks.push(array.slice(i, i + chunkSize));
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
    chunks.forEach(chunk => shuffleArray(chunk));

    // –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    return chunks.flat();
}

function distributeResources(randomize = false) {
    if (randomize) {
        randomizeResourceCounts();
    }

    createEmptyHexMap();

    const board = document.getElementById('game-board');
    const hexagons = Array.from(board.querySelectorAll('.hexagon'));
    const selectedSize = document.querySelector('input[name="board-size"]:checked').value;
    const layout = CONFIG.layouts[selectedSize];
    const noAdjacentSame = document.getElementById('no-adjacent-same').checked;

    let resourcePool = createResourcePool();
    const totalCells = getTotalCells();

    if (resourcePool.length > totalCells) {
        resourcePool = resourcePool.slice(0, totalCells);
    } else if (resourcePool.length < totalCells) {
        const diff = totalCells - resourcePool.length;
        for (let i = 0; i < diff; i++) {
            resourcePool.push({ type: 'empty', name: '–ü—É—Å—Ç–æ', symbol: '' });
        }
    }

    if (noAdjacentSame) {
        // –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        const hexGrid = {};
        const availableHexes = [...hexagons];

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≥–µ–∫—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        hexagons.forEach(hex => {
            const row = parseInt(hex.dataset.row);
            const col = parseInt(hex.dataset.col);
            if (!hexGrid[row]) hexGrid[row] = {};
            hexGrid[row][col] = hex;
        });

        // –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–º–µ—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–µ–µ –≤—Å–µ–≥–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å (–ø—É—Å—Ç—ã–Ω–∏, –≥–æ—Ä—ã)
        resourcePool.sort((a, b) => {
            // –ü—É—Å—Ç—ã–Ω–∏ —Ä–∞–∑–º–µ—â–∞–µ–º –ø–µ—Ä–≤—ã–º–∏, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∏—Ö –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            if (a.type === 'desert') return -1;
            if (b.type === 'desert') return 1;
            return 0;
        });

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –∫–ª–µ—Ç–∫–∏
        const getForbiddenTypes = (hex) => {
            const forbidden = new Set();
            const row = parseInt(hex.dataset.row);
            const col = parseInt(hex.dataset.col);
            const neighbors = getNeighbors(row, col, layout);

            neighbors.forEach(neighbor => {
                const neighborHex = hexGrid[neighbor.row]?.[neighbor.col];
                if (neighborHex && !neighborHex.classList.contains('empty')) {
                    forbidden.add(neighborHex.classList[1]); // –í—Ç–æ—Ä–æ–π –∫–ª–∞—Å—Å - —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞
                }
            });

            return forbidden;
        };

        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        for (const resource of resourcePool) {
            if (resource.type === 'empty') continue;

            let placed = false;
            let attempts = 0;
            const maxAttempts = availableHexes.length * 3; // –£–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–ª–µ—Ç–∫—É
            while (!placed && attempts < maxAttempts && availableHexes.length > 0) {
                attempts++;

                // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–ª–µ—Ç–∫—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                const randomIndex = Math.floor(Math.random() * availableHexes.length);
                const hex = availableHexes[randomIndex];

                // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è —ç—Ç–æ–π –∫–ª–µ—Ç–∫–∏
                const forbiddenTypes = getForbiddenTypes(hex);

                // –ï—Å–ª–∏ —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ –∑–∞–ø—Ä–µ—â–µ–Ω, —Ä–∞–∑–º–µ—â–∞–µ–º
                if (!forbiddenTypes.has(resource.type)) {
                    hex.className = `hexagon ${resource.type}`;
                    hex.innerHTML = `<span class="resource-icon">${resource.symbol}</span>`;
                    hex.title = resource.name;

                    // –£–¥–∞–ª—è–µ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                    availableHexes.splice(randomIndex, 1);
                    placed = true;
                }
            }

            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏, —Ä–∞–∑–º–µ—â–∞–µ–º –≤ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
            if (!placed && availableHexes.length > 0) {
                const hex = availableHexes.shift();
                hex.className = `hexagon ${resource.type}`;
                hex.innerHTML = `<span class="resource-icon">${resource.symbol}</span>`;
                hex.title = resource.name;
            }
        }

        // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–ª–µ—Ç–∫–∏ –¥–µ–ª–∞–µ–º –ø—É—Å—Ç—ã–º–∏
        availableHexes.forEach(hex => {
            hex.className = 'hexagon empty';
            hex.innerHTML = '';
            hex.title = '–ü—É—Å—Ç–æ–π —Å–ª–æ—Ç';
        });
    } else {
        // –ü—Ä–æ—Å—Ç–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        resourcePool = shuffleArray(resourcePool);
        hexagons.forEach((hex, index) => {
            const resource = resourcePool[index] || { type: 'empty', name: '–ü—É—Å—Ç–æ', symbol: '' };

            if (resource.type === 'empty') {
                hex.className = 'hexagon empty';
                hex.innerHTML = '';
                hex.title = '–ü—É—Å—Ç–æ–π —Å–ª–æ—Ç';
            } else {
                hex.className = `hexagon ${resource.type}`;
                hex.innerHTML = `<span class="resource-icon">${resource.symbol}</span>`;
                hex.title = resource.name;
            }
        });
    }
    distributeNumbers();
}

function shuffleArray(array) {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    CONFIG.resourceTypes.forEach(resource => {
        document.getElementById(`${resource.id}-count`).value = resource.default;
    });

    createEmptyHexMap();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('generate-btn').addEventListener('click', () => {
        distributeResources();
    });

    document.getElementById('randomize-counts-btn').addEventListener('click', () => {
        randomizeResourceCounts();
    });

    document.getElementById('randomize-distribution-btn').addEventListener('click', () => {
        distributeResources(true);
    });

    document.querySelectorAll('input[name="board-size"]').forEach(radio => {
        radio.addEventListener('change', () => {
            if (document.getElementById('random-counts').checked) {
                randomizeResourceCounts();
            }
        });
    });
});